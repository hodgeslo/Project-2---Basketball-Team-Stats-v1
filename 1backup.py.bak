# 5. Create a balance_teams function
def balance_teams(players, teams):
    num_players_per_team = int(len(players) / len(teams))
    cleaned_players_list = clean_data(players[:])
    print(f"\nFROM BALANCE_TEAMS FUNCTION: {cleaned_players_list}")
    balanced_team_list = teams[:]
    players_only_set = set()
    testlist = []
    my_list_for_del = cleaned_players_list[:]
    experienced_players_list = []
    inexperienced_players_list = []

    for a_experience, b_experience in enumerate(cleaned_players_list):
        if b_experience['experience']:
            experienced_players_list.append(b_experience)
        else:
            inexperienced_players_list.append(b_experience)

    print(f"\nFROM BALANCE_TEAMS FUNCTION, EXP: {len(experienced_players_list), experienced_players_list}")
    print(f"\nFROM BALANCE_TEAMS FUNCTION, IN-EXP: {len(inexperienced_players_list), inexperienced_players_list}")

    new_combined_list_exp = []

    for z in range(4):
        new_combined_list_exp.append(experienced_players_list[:z])
        new_combined_list_exp.append(inexperienced_players_list[:z])

    print("\n ****** LOOOOK ****** LOOOOK")
    for u in new_combined_list_exp:
        print(u)

    my_list_for_del_combined = new_combined_list_exp[:]

    for m in range(len(teams[:])):
        # testlist.append([{balanced_team_list[m]:my_list_for_del[:num_players_per_team].copy()}])
        testlist.append([{balanced_team_list[m]:my_list_for_del_combined[:num_players_per_team]}])
        del my_list_for_del_combined[:num_players_per_team]

    print('\n\n\n')
    print(f"*** THIS IS TEST LIST index 0:\n {testlist[0][0]}\n")
    print(f"*** THIS IS TEST LIST: index 1:\n {testlist[0][1]}\n")
    print(f"*** THIS IS TEST LIST: index 2:\n {testlist[0][2]}\n")

    # average_height_list = []
    # for nn in testlist[0][0]['Panthers']:
    #     average_height_list.append(nn['height'])
    #     print(nn['height'])
    #
    # print(sum(average_height_list)/6)


    # START AGAIN ABOVE THIS LINE

    # for key in cleaned_players_list:
    #     # players_only_set.add(key['name'])
    #     players_only_list.append(key['name'])

    # for i in range(num_players_team):
    #     players_only_set.add(players_only_list[i])
    #     # balanced_team_list.append(players_only_list[i])

    # for idx_players, num_players in enumerate(cleaned_players_list):
    #     players_only_set.add(players_only_list[idx_players])
    #     # cleaned_player_list.pop(idx_players)
    #     print(idx_players, num_players)

    # for i in range(len(teams)):
    #     players_only_dict[initial_team_list[i]] = players_only_set

    # for idx, team_name in enumerate(teams):
    #     players_only_dict[team_name] = players_only_set

    # print(f"This is a set: {players_only_set}")
    # print(f"This is a list: {players_only_list}")
    # print(f"This is a dict: {players_only_dict}")
    print(f"\n\n")

    """
    Here is where display the team stats
    """
    # number_of_teams = len(teams)
    # for idx, team_name_menu in enumerate(teams):
    #     print(f" {idx + 1})  {team_name_menu}")
    #
    # team_menu_user_selected = False
    #
    # while not team_menu_user_selected:
    #     try:
    #         team_menu_selected_option = int(input(f"\nEnter an option > "))
    #         if team_menu_selected_option < 1 or team_menu_selected_option > number_of_teams:
    #             print(f"Please enter a number between 1 and {number_of_teams}")
    #         else:
    #             print(f"Team: {teams[team_menu_selected_option - 1]} Stats")
    #             print(f"--------------------")
    #             print(f"Total players: ")
    #             print(f"Total experienced: ")
    #             print(f"Total inexperienced: ")
    #             print(f"Average height: ")
    #             team_menu_user_selected = True
    #     except ValueError:
    #         print('Numbers only')
    return players_only_set




# 5. Create a balance_teams function
def balance_teams(players, teams):
    num_players_per_team = int(len(players) / len(teams))
    cleaned_players_list = clean_data(players[:])
    balanced_team_list = teams[:]
    players_only_set = set()
    testlist = []
    my_list_for_del = cleaned_players_list[:]

    for m in range(len(teams[:])):
        testlist.append([{balanced_team_list[m]:my_list_for_del[:num_players_per_team].copy()}])
        del my_list_for_del[:num_players_per_team]
        # print(my_list_for_del)

    print('\n\n\n')
    print(f"*** THIS IS TEST LIST index 0:\n {testlist[0][0]}\n")
    print(f"*** THIS IS TEST LIST: index 1:\n {testlist[1][0]}\n")
    print(f"*** THIS IS TEST LIST: index 2:\n {testlist[2][0]}\n")

    average_height_list = []
    for nn in testlist[0][0]['Panthers']:
        average_height_list.append(nn['height'])
        print(nn['height'])

    print(sum(average_height_list)/6)


    # START AGAIN ABOVE THIS LINE

    # for key in cleaned_players_list:
    #     # players_only_set.add(key['name'])
    #     players_only_list.append(key['name'])

    # for i in range(num_players_team):
    #     players_only_set.add(players_only_list[i])
    #     # balanced_team_list.append(players_only_list[i])

    # for idx_players, num_players in enumerate(cleaned_players_list):
    #     players_only_set.add(players_only_list[idx_players])
    #     # cleaned_player_list.pop(idx_players)
    #     print(idx_players, num_players)

    # for i in range(len(teams)):
    #     players_only_dict[initial_team_list[i]] = players_only_set

    # for idx, team_name in enumerate(teams):
    #     players_only_dict[team_name] = players_only_set

    # print(f"This is a set: {players_only_set}")
    # print(f"This is a list: {players_only_list}")
    # print(f"This is a dict: {players_only_dict}")
    print(f"\n\n")

    """
    Here is where display the team stats
    """
    # number_of_teams = len(teams)
    # for idx, team_name_menu in enumerate(teams):
    #     print(f" {idx + 1})  {team_name_menu}")
    #
    # team_menu_user_selected = False
    #
    # while not team_menu_user_selected:
    #     try:
    #         team_menu_selected_option = int(input(f"\nEnter an option > "))
    #         if team_menu_selected_option < 1 or team_menu_selected_option > number_of_teams:
    #             print(f"Please enter a number between 1 and {number_of_teams}")
    #         else:
    #             print(f"Team: {teams[team_menu_selected_option - 1]} Stats")
    #             print(f"--------------------")
    #             print(f"Total players: ")
    #             print(f"Total experienced: ")
    #             print(f"Total inexperienced: ")
    #             print(f"Average height: ")
    #             team_menu_user_selected = True
    #     except ValueError:
    #         print('Numbers only')
    return players_only_set